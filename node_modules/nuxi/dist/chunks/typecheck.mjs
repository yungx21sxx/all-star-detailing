import { execa } from './index3.mjs';
import { d as defineCommand, a } from '../shared/nuxi.f8a4d1b7.mjs';
import { l as loadKit, w as writeTypes } from '../shared/nuxi.0094b825.mjs';
import { t as tryResolveModule } from '../shared/nuxi.34efa6e8.mjs';
import { s as sharedArgs, l as legacyRootDirArgs, r as resolve } from '../shared/nuxi.a100eb6a.mjs';
import 'node:url';
import 'node:child_process';
import 'node:string_decoder';
import 'node:util';
import 'node:process';
import 'node:tty';
import 'node:path';
import '../shared/nuxi.1433d887.mjs';
import '../shared/nuxi.2155838d.mjs';
import 'child_process';
import 'path';
import 'fs';
import 'node:timers/promises';
import 'node:os';
import 'node:events';
import 'node:v8';
import 'node:fs';
import 'node:stream';
import 'node:buffer';
import 'node:stream/promises';
import 'node:perf_hooks';
import '../shared/nuxi.eaa29140.mjs';
import './satisfies.mjs';
import '../shared/nuxi.44a0b114.mjs';
import '../shared/nuxi.3d05c4d3.mjs';
import 'node:module';
import '../shared/nuxi.deb0a220.mjs';
import 'node:assert';
import '../shared/nuxi.4d986127.mjs';
import 'node:crypto';
import 'node:vm';
import 'assert';
import 'module';
import 'os';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';
import 'node:fs/promises';
import '../shared/nuxi.15c58622.mjs';

const typecheck = defineCommand({
  meta: {
    name: "typecheck",
    description: "Runs `vue-tsc` to check types throughout your app."
  },
  args: {
    ...sharedArgs,
    ...legacyRootDirArgs
  },
  async run(ctx) {
    process.env.NODE_ENV = process.env.NODE_ENV || "production";
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir || ".");
    const {
      loadNuxt,
      buildNuxt,
      writeTypes: writeTypes$1 = writeTypes
    } = await loadKit(cwd);
    const nuxt = await loadNuxt({
      cwd,
      overrides: {
        _prepare: true,
        logLevel: ctx.args.logLevel
      }
    });
    await writeTypes$1(nuxt);
    await buildNuxt(nuxt);
    await nuxt.close();
    const [resolvedTypeScript, resolvedVueTsc] = await Promise.all([
      tryResolveModule("typescript"),
      tryResolveModule("vue-tsc/bin/vue-tsc.js")
    ]);
    if (resolvedTypeScript && resolvedVueTsc) {
      await execa(resolvedVueTsc, ["--noEmit"], {
        preferLocal: true,
        stdio: "inherit",
        cwd
      });
    } else {
      if (a) {
        await execa(
          "bun",
          "install typescript vue-tsc --global --silent".split(" "),
          { stdio: "inherit", cwd }
        );
        await execa("bunx", "vue-tsc --noEmit".split(" "), {
          stdio: "inherit",
          cwd
        });
      } else {
        await execa(
          "npx",
          "-p vue-tsc -p typescript vue-tsc --noEmit".split(" "),
          { stdio: "inherit", cwd }
        );
      }
    }
  }
});

export { typecheck as default };
