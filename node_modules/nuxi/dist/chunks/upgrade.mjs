import { execSync } from 'node:child_process';
import { existsSync } from 'node:fs';
import { d as defineCommand, c as consola, b as colors } from '../shared/nuxi.f8a4d1b7.mjs';
import 'node:util';
import 'node:path';
import 'node:process';
import 'node:tty';
import { r as readPackageJSON } from '../shared/nuxi.44a0b114.mjs';
import { g as getPackageManager, p as packageManagerLocks } from '../shared/nuxi.1d08daa3.mjs';
import { r as rmRecursive, t as touchFile } from '../shared/nuxi.18fbd29d.mjs';
import { c as cleanupNuxtDirs, n as nuxtVersionToGitIdentifier } from '../shared/nuxi.1320de0d.mjs';
import { l as loadKit } from '../shared/nuxi.0094b825.mjs';
import { s as sharedArgs, l as legacyRootDirArgs, r as resolve, b as relative } from '../shared/nuxi.a100eb6a.mjs';
import 'node:url';
import '../shared/nuxi.3d05c4d3.mjs';
import 'node:module';
import '../shared/nuxi.deb0a220.mjs';
import 'node:assert';
import 'node:v8';
import 'node:perf_hooks';
import '../shared/nuxi.eaa29140.mjs';
import './satisfies.mjs';
import '../shared/nuxi.2155838d.mjs';
import '../shared/nuxi.4d986127.mjs';
import 'node:os';
import 'node:crypto';
import 'node:vm';
import 'assert';
import 'fs';
import 'module';
import 'os';
import 'path';
import 'process';
import 'tty';
import 'url';
import 'util';
import 'v8';
import 'node:fs/promises';
import '../shared/nuxi.15c58622.mjs';
import '../shared/nuxi.34efa6e8.mjs';

async function getNuxtVersion(path) {
  try {
    const pkg = await readPackageJSON("nuxt", { url: path });
    if (!pkg.version) {
      consola.warn("Cannot find any installed Nuxt versions in ", path);
    }
    return pkg.version || null;
  } catch {
    return null;
  }
}
async function checkNuxtDependencyType(pkg) {
  if (pkg.dependencies && pkg.dependencies["nuxt"]) {
    return "dependencies";
  }
  if (pkg.devDependencies && pkg.devDependencies["nuxt"]) {
    return "devDependencies";
  }
  return "dependencies";
}
function hasPnpmWorkspaceFile(cwd) {
  const pnpmWorkspaceFilePath = resolve(cwd, "pnpm-workspace.yaml");
  return existsSync(pnpmWorkspaceFilePath);
}
const nuxtVersionTags = {
  "3.x": "3x",
  "4.x": "latest"
};
async function getNightlyVersion(packageNames) {
  const result = await consola.prompt(
    "Which nightly Nuxt release channel do you want to install? (3.x or 4.x)",
    {
      type: "select",
      options: ["3.x", "4.x"],
      default: "3.x"
    }
  );
  const nuxtVersion = typeof result === "string" ? result : "3.x";
  const npmPackages = packageNames.map((p) => `${p}@npm:${p}-nightly@${nuxtVersionTags[nuxtVersion]}`);
  return { npmPackages, nuxtVersion };
}
async function getRequiredNewVersion(packageNames, channel) {
  if (channel === "nightly") {
    return getNightlyVersion(packageNames);
  }
  return { npmPackages: packageNames.map((p) => `${p}@latest`), nuxtVersion: "3" };
}
const upgrade = defineCommand({
  meta: {
    name: "upgrade",
    description: "Upgrade Nuxt"
  },
  args: {
    ...sharedArgs,
    ...legacyRootDirArgs,
    force: {
      type: "boolean",
      alias: "f",
      description: "Force upgrade to recreate lockfile and node_modules"
    },
    channel: {
      type: "string",
      alias: "ch",
      default: "stable",
      description: "Specify a channel to install from (nightly or stable)"
    }
  },
  async run(ctx) {
    const cwd = resolve(ctx.args.cwd || ctx.args.rootDir || ".");
    const packageManager = getPackageManager(cwd);
    if (!packageManager) {
      consola.error(
        `Unable to determine the package manager used by this project.

No lock files found in \`${cwd}\`, and no \`packageManager\` field specified in \`package.json\`.

Please either add the \`packageManager\` field to \`package.json\` or execute the installation command for your package manager. For example, you can use \`pnpm i\`, \`npm i\`, \`bun i\`, or \`yarn i\`, and then try again.`
      );
      process.exit(1);
    }
    const packageManagerVersion = execSync(`${packageManager} --version`).toString("utf8").trim();
    consola.info("Package manager:", packageManager, packageManagerVersion);
    const currentVersion = await getNuxtVersion(cwd) || "[unknown]";
    consola.info("Current Nuxt version:", currentVersion);
    const pkg = await readPackageJSON(cwd).catch(() => null);
    const nuxtDependencyType = pkg ? await checkNuxtDependencyType(pkg) : "dependencies";
    const corePackages = ["@nuxt/kit", "@nuxt/schema", "@nuxt/vite-builder", "@nuxt/webpack-builder", "@nuxt/rspack-builder"];
    const packagesToUpdate = pkg ? corePackages.filter((p) => pkg.dependencies?.[p] || pkg.devDependencies?.[p]) : [];
    const { npmPackages, nuxtVersion } = await getRequiredNewVersion(["nuxt", ...packagesToUpdate], ctx.args.channel);
    const pmLockFile = resolve(cwd, packageManagerLocks[packageManager]);
    const forceRemovals = ["node_modules", relative(process.cwd(), pmLockFile)].map((p) => colors.cyan(p)).join(" and ");
    if (ctx.args.force === void 0) {
      ctx.args.force = await consola.prompt(
        `Would you like to recreate ${forceRemovals} to fix problems with hoisted dependency versions and ensure you have the most up-to-date dependencies?`,
        {
          type: "confirm",
          default: true
        }
      );
    }
    if (ctx.args.force) {
      consola.info(
        `Recreating ${forceRemovals}. If you encounter any issues, revert the changes and try with \`--no-force\``
      );
      await rmRecursive([pmLockFile, resolve(cwd, "node_modules")]);
      await touchFile(pmLockFile);
    }
    const versionType = ctx.args.channel === "nightly" ? "nightly" : "latest stable";
    consola.info(`Installing ${versionType} Nuxt ${nuxtVersion} release...`);
    const command = [
      packageManager,
      packageManager === "yarn" ? "add" : "install",
      nuxtDependencyType === "devDependencies" ? "-D" : "",
      packageManager === "pnpm" && hasPnpmWorkspaceFile(cwd) ? "-w" : "",
      ...npmPackages
    ].filter(Boolean).join(" ");
    execSync(command, { stdio: "inherit", cwd });
    let buildDir = ".nuxt";
    try {
      const { loadNuxtConfig } = await loadKit(cwd);
      const nuxtOptions = await loadNuxtConfig({ cwd });
      buildDir = nuxtOptions.buildDir;
    } catch {
    }
    await cleanupNuxtDirs(cwd, buildDir);
    const upgradedVersion = await getNuxtVersion(cwd) || "[unknown]";
    consola.info("Upgraded Nuxt version:", upgradedVersion);
    if (upgradedVersion === "[unknown]") {
      return;
    }
    if (upgradedVersion === currentVersion) {
      consola.success("You're already using the latest version of Nuxt.");
    } else {
      consola.success(
        "Successfully upgraded Nuxt from",
        currentVersion,
        "to",
        upgradedVersion
      );
      if (currentVersion === "[unknown]") {
        return;
      }
      const commitA = nuxtVersionToGitIdentifier(currentVersion);
      const commitB = nuxtVersionToGitIdentifier(upgradedVersion);
      if (commitA && commitB) {
        consola.info(
          "Changelog:",
          `https://github.com/nuxt/nuxt/compare/${commitA}...${commitB}`
        );
      }
    }
  }
});

export { upgrade as default };
